{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\AiAgent\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\n\n// Main App component for the AI Tech Support Training Website\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to store the conversation history between user and AI\n  const [chatHistory, setChatHistory] = useState([]);\n  // State to store the current input from the user\n  const [userInput, setUserInput] = useState('');\n  // State to manage the loading status while waiting for AI response\n  const [isLoading, setIsLoading] = useState(false);\n  // State to control whether AI responses should be spoken aloud\n  const [isVoiceEnabled, setIsVoiceEnabled] = useState(true); // Default to voice enabled\n  // Ref to automatically scroll to the latest message in the chat\n  const messagesEndRef = useRef(null);\n\n  // Effect to scroll to the bottom of the chat window whenever chatHistory changes\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [chatHistory]);\n\n  // Function to speak text using the Web Speech API\n  const speakText = text => {\n    if (!isVoiceEnabled || !('speechSynthesis' in window)) {\n      console.warn(\"Speech synthesis not supported or voice disabled.\");\n      return;\n    }\n    const utterance = new SpeechSynthesisUtterance(text);\n    // You can customize voice, pitch, rate here if needed\n    // utterance.voice = speechSynthesis.getVoices().find(voice => voice.name === 'Google US English');\n    // utterance.pitch = 1;\n    // utterance.rate = 1;\n    speechSynthesis.speak(utterance);\n  };\n\n  // Function to send a message to the AI\n  const sendMessage = async () => {\n    if (userInput.trim() === '') return; // Prevent sending empty messages\n\n    const userMessage = {\n      role: 'user',\n      text: userInput\n    };\n    // Update chat history with the user's message\n    setChatHistory(prev => [...prev, userMessage]);\n    setUserInput(''); // Clear the input field\n\n    setIsLoading(true); // Set loading state to true\n\n    try {\n      // Prepare the chat history for the Gemini API payload\n      // The AI's persona is set in the first 'user' part of the initial message\n      let apiChatHistory = chatHistory.map(msg => ({\n        role: msg.role === 'user' ? 'user' : 'model',\n        parts: [{\n          text: msg.text\n        }]\n      }));\n\n      // Add the current user message to the API chat history\n      apiChatHistory.push({\n        role: 'user',\n        parts: [{\n          text: userInput\n        }]\n      });\n\n      // Define the initial prompt for the AI to set its persona\n      // This is crucial for guiding the AI's behavior as a tech support agent\n      const initialPrompt = {\n        role: \"user\",\n        parts: [{\n          text: \"You are a helpful and patient tech support agent. Your goal is to assist the user in troubleshooting common technical issues. Provide clear, step-by-step instructions and ask clarifying questions when needed. Keep your responses professional and focused on problem-solving. This is for training purposes, so be thorough in your explanations. Start by asking the user what problem they are experiencing.\"\n        }]\n      };\n\n      // If it's the very first message, include the initial persona prompt\n      const payloadContents = chatHistory.length === 0 ? [initialPrompt, {\n        role: \"user\",\n        parts: [{\n          text: userInput\n        }]\n      }] : apiChatHistory;\n      const payload = {\n        contents: payloadContents,\n        generationConfig: {\n          temperature: 0.7,\n          // Controls the randomness of the output\n          topK: 40,\n          // Considers the top K most likely tokens\n          topP: 0.95,\n          // Nucleus sampling: selects from tokens whose cumulative probability exceeds P\n          maxOutputTokens: 500 // Maximum number of tokens in the response\n        }\n      };\n\n      // API key is left empty as Canvas provides it at runtime\n      const apiKey = \"\";\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n        const aiResponseText = result.candidates[0].content.parts[0].text;\n        // Update chat history with the AI's response\n        setChatHistory(prev => [...prev, {\n          role: 'model',\n          text: aiResponseText\n        }]);\n        // Speak the AI's response\n        speakText(aiResponseText);\n      } else {\n        console.error('Unexpected API response structure:', result);\n        const errorMessage = 'Sorry, I could not get a response from the AI. Please try again.';\n        setChatHistory(prev => [...prev, {\n          role: 'model',\n          text: errorMessage\n        }]);\n        speakText(errorMessage);\n      }\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      const errorMessage = 'There was an error connecting to the AI. Please check your network or try again later.';\n      setChatHistory(prev => [...prev, {\n        role: 'model',\n        text: errorMessage\n      }]);\n      speakText(errorMessage);\n    } finally {\n      setIsLoading(false); // Reset loading state\n    }\n  };\n\n  // Function to reset the chat\n  const resetChat = () => {\n    // Stop any ongoing speech\n    if ('speechSynthesis' in window) {\n      speechSynthesis.cancel();\n    }\n    setChatHistory([]); // Clear all messages\n    setUserInput(''); // Clear input field\n    setIsLoading(false); // Ensure loading is false\n    // Send an initial welcome message from the AI after reset\n    const welcomeMessage = 'Hello! I am your Optimum Agent. How can I assist you with your technical issue today?';\n    setChatHistory([{\n      role: 'model',\n      text: welcomeMessage\n    }]);\n    speakText(welcomeMessage); // Speak the welcome message\n  };\n\n  // Initial message from the AI when the component mounts or resets\n  useEffect(() => {\n    if (chatHistory.length === 0) {\n      resetChat(); // Call reset to set the initial welcome message and speak it\n    }\n  }, []); // Run only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4 font-inter\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-xl shadow-2xl w-full max-w-2xl flex flex-col h-[90vh] overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-blue-600 text-white p-4 rounded-t-xl shadow-md flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold\",\n          children: \"AI Tech Support Trainer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center cursor-pointer\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mr-2 text-white font-semibold\",\n              children: \"Voice On\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"relative\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                className: \"sr-only\",\n                checked: isVoiceEnabled,\n                onChange: () => setIsVoiceEnabled(!isVoiceEnabled)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `block bg-gray-600 w-14 h-8 rounded-full ${isVoiceEnabled ? 'bg-green-500' : 'bg-gray-600'}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition-transform ${isVoiceEnabled ? 'translate-x-full' : ''}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetChat,\n            className: \"bg-blue-700 hover:bg-blue-800 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105\",\n            title: \"Start a new conversation\",\n            children: \"Reset Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 p-6 overflow-y-auto custom-scrollbar\",\n        children: [chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `mb-4 p-3 rounded-lg max-w-[80%] shadow-sm ${message.role === 'user' ? 'bg-blue-500 text-white ml-auto rounded-br-none' : 'bg-gray-200 text-gray-800 mr-auto rounded-bl-none'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-medium mb-1\",\n            children: [message.role === 'user' ? 'You' : 'Optimum Agent', \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 p-3 rounded-lg max-w-[80%] mr-auto bg-gray-200 text-gray-800 shadow-sm rounded-bl-none animate-pulse\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-medium mb-1\",\n            children: \"Optimum Agent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Thinking...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 bg-gray-100 border-t border-gray-200 flex items-center rounded-b-xl\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          onKeyPress: e => {\n            if (e.key === 'Enter' && !isLoading) {\n              sendMessage();\n            }\n          },\n          placeholder: \"Type your technical issue or question...\",\n          className: \"flex-1 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-700\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          className: `ml-4 px-6 py-3 rounded-lg font-semibold shadow-md transition duration-300 ease-in-out transform ${isLoading ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700 text-white hover:scale-105'}`,\n          disabled: isLoading,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"Nxq3g/fQo/iDTkZ+hYkHWM3nzto=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useRef","useState","jsxDEV","_jsxDEV","App","_s","chatHistory","setChatHistory","userInput","setUserInput","isLoading","setIsLoading","isVoiceEnabled","setIsVoiceEnabled","messagesEndRef","current","scrollIntoView","behavior","speakText","text","window","console","warn","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","sendMessage","trim","userMessage","role","prev","apiChatHistory","map","msg","parts","push","initialPrompt","payloadContents","length","payload","contents","generationConfig","temperature","topK","topP","maxOutputTokens","apiKey","apiUrl","response","fetch","method","headers","body","JSON","stringify","result","json","candidates","content","aiResponseText","error","errorMessage","resetChat","cancel","welcomeMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","onClick","title","message","index","ref","value","e","target","onKeyPress","key","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/HP/AiAgent/src/App.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n// Main App component for the AI Tech Support Training Website\nfunction App() {\n    // State to store the conversation history between user and AI\n    const [chatHistory, setChatHistory] = useState([]);\n    // State to store the current input from the user\n    const [userInput, setUserInput] = useState('');\n    // State to manage the loading status while waiting for AI response\n    const [isLoading, setIsLoading] = useState(false);\n    // State to control whether AI responses should be spoken aloud\n    const [isVoiceEnabled, setIsVoiceEnabled] = useState(true); // Default to voice enabled\n    // Ref to automatically scroll to the latest message in the chat\n    const messagesEndRef = useRef(null);\n\n    // Effect to scroll to the bottom of the chat window whenever chatHistory changes\n    useEffect(() => {\n        if (messagesEndRef.current) {\n            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n    }, [chatHistory]);\n\n    // Function to speak text using the Web Speech API\n    const speakText = (text) => {\n        if (!isVoiceEnabled || !('speechSynthesis' in window)) {\n            console.warn(\"Speech synthesis not supported or voice disabled.\");\n            return;\n        }\n        const utterance = new SpeechSynthesisUtterance(text);\n        // You can customize voice, pitch, rate here if needed\n        // utterance.voice = speechSynthesis.getVoices().find(voice => voice.name === 'Google US English');\n        // utterance.pitch = 1;\n        // utterance.rate = 1;\n        speechSynthesis.speak(utterance);\n    };\n\n    // Function to send a message to the AI\n    const sendMessage = async () => {\n        if (userInput.trim() === '') return; // Prevent sending empty messages\n\n        const userMessage = { role: 'user', text: userInput };\n        // Update chat history with the user's message\n        setChatHistory((prev) => [...prev, userMessage]);\n        setUserInput(''); // Clear the input field\n\n        setIsLoading(true); // Set loading state to true\n\n        try {\n            // Prepare the chat history for the Gemini API payload\n            // The AI's persona is set in the first 'user' part of the initial message\n            let apiChatHistory = chatHistory.map(msg => ({\n                role: msg.role === 'user' ? 'user' : 'model',\n                parts: [{ text: msg.text }]\n            }));\n\n            // Add the current user message to the API chat history\n            apiChatHistory.push({ role: 'user', parts: [{ text: userInput }] });\n\n            // Define the initial prompt for the AI to set its persona\n            // This is crucial for guiding the AI's behavior as a tech support agent\n            const initialPrompt = {\n                role: \"user\",\n                parts: [{ text: \"You are a helpful and patient tech support agent. Your goal is to assist the user in troubleshooting common technical issues. Provide clear, step-by-step instructions and ask clarifying questions when needed. Keep your responses professional and focused on problem-solving. This is for training purposes, so be thorough in your explanations. Start by asking the user what problem they are experiencing.\" }]\n            };\n\n            // If it's the very first message, include the initial persona prompt\n            const payloadContents = chatHistory.length === 0\n                ? [initialPrompt, { role: \"user\", parts: [{ text: userInput }] }]\n                : apiChatHistory;\n\n            const payload = {\n                contents: payloadContents,\n                generationConfig: {\n                    temperature: 0.7, // Controls the randomness of the output\n                    topK: 40,         // Considers the top K most likely tokens\n                    topP: 0.95,       // Nucleus sampling: selects from tokens whose cumulative probability exceeds P\n                    maxOutputTokens: 500 // Maximum number of tokens in the response\n                }\n            };\n\n            // API key is left empty as Canvas provides it at runtime\n            const apiKey = \"\";\n            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n\n            const response = await fetch(apiUrl, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(payload)\n            });\n\n            const result = await response.json();\n\n            if (result.candidates && result.candidates.length > 0 &&\n                result.candidates[0].content && result.candidates[0].content.parts &&\n                result.candidates[0].content.parts.length > 0) {\n                const aiResponseText = result.candidates[0].content.parts[0].text;\n                // Update chat history with the AI's response\n                setChatHistory((prev) => [...prev, { role: 'model', text: aiResponseText }]);\n                // Speak the AI's response\n                speakText(aiResponseText);\n            } else {\n                console.error('Unexpected API response structure:', result);\n                const errorMessage = 'Sorry, I could not get a response from the AI. Please try again.';\n                setChatHistory((prev) => [...prev, { role: 'model', text: errorMessage }]);\n                speakText(errorMessage);\n            }\n        } catch (error) {\n            console.error('Error fetching AI response:', error);\n            const errorMessage = 'There was an error connecting to the AI. Please check your network or try again later.';\n            setChatHistory((prev) => [...prev, { role: 'model', text: errorMessage }]);\n            speakText(errorMessage);\n        } finally {\n            setIsLoading(false); // Reset loading state\n        }\n    };\n\n    // Function to reset the chat\n    const resetChat = () => {\n        // Stop any ongoing speech\n        if ('speechSynthesis' in window) {\n            speechSynthesis.cancel();\n        }\n        setChatHistory([]); // Clear all messages\n        setUserInput('');   // Clear input field\n        setIsLoading(false); // Ensure loading is false\n        // Send an initial welcome message from the AI after reset\n        const welcomeMessage = 'Hello! I am your Optimum Agent. How can I assist you with your technical issue today?';\n        setChatHistory([{ role: 'model', text: welcomeMessage }]);\n        speakText(welcomeMessage); // Speak the welcome message\n    };\n\n    // Initial message from the AI when the component mounts or resets\n    useEffect(() => {\n        if (chatHistory.length === 0) {\n            resetChat(); // Call reset to set the initial welcome message and speak it\n        }\n    }, []); // Run only once on mount\n\n    return (\n        <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4 font-inter\">\n            <div className=\"bg-white rounded-xl shadow-2xl w-full max-w-2xl flex flex-col h-[90vh] overflow-hidden\">\n                {/* Header */}\n                <div className=\"bg-blue-600 text-white p-4 rounded-t-xl shadow-md flex justify-between items-center\">\n                    <h1 className=\"text-2xl font-bold\">AI Tech Support Trainer</h1>\n                    <div className=\"flex items-center space-x-4\">\n                        <label className=\"flex items-center cursor-pointer\">\n                            <span className=\"mr-2 text-white font-semibold\">Voice On</span>\n                            <div className=\"relative\">\n                                <input\n                                    type=\"checkbox\"\n                                    className=\"sr-only\"\n                                    checked={isVoiceEnabled}\n                                    onChange={() => setIsVoiceEnabled(!isVoiceEnabled)}\n                                />\n                                <div className={`block bg-gray-600 w-14 h-8 rounded-full ${isVoiceEnabled ? 'bg-green-500' : 'bg-gray-600'}`}></div>\n                                <div className={`dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition-transform ${isVoiceEnabled ? 'translate-x-full' : ''}`}></div>\n                            </div>\n                        </label>\n                        <button\n                            onClick={resetChat}\n                            className=\"bg-blue-700 hover:bg-blue-800 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105\"\n                            title=\"Start a new conversation\"\n                        >\n                            Reset Chat\n                        </button>\n                    </div>\n                </div>\n\n                {/* Chat Messages Area */}\n                <div className=\"flex-1 p-6 overflow-y-auto custom-scrollbar\">\n                    {chatHistory.map((message, index) => (\n                        <div\n                            key={index}\n                            className={`mb-4 p-3 rounded-lg max-w-[80%] shadow-sm ${\n                                message.role === 'user'\n                                    ? 'bg-blue-500 text-white ml-auto rounded-br-none'\n                                    : 'bg-gray-200 text-gray-800 mr-auto rounded-bl-none'\n                            }`}\n                        >\n                            <p className=\"font-medium mb-1\">\n                                {message.role === 'user' ? 'You' : 'Optimum Agent'} {/* Changed here */}\n                            </p>\n                            <p>{message.text}</p>\n                        </div>\n                    ))}\n                    {isLoading && (\n                        <div className=\"mb-4 p-3 rounded-lg max-w-[80%] mr-auto bg-gray-200 text-gray-800 shadow-sm rounded-bl-none animate-pulse\">\n                            <p className=\"font-medium mb-1\">Optimum Agent</p> {/* Changed here */}\n                            <p>Thinking...</p>\n                        </div>\n                    )}\n                    <div ref={messagesEndRef} /> {/* Scroll target */}\n                </div>\n\n                {/* Input Area */}\n                <div className=\"p-4 bg-gray-100 border-t border-gray-200 flex items-center rounded-b-xl\">\n                    <input\n                        type=\"text\"\n                        value={userInput}\n                        onChange={(e) => setUserInput(e.target.value)}\n                        onKeyPress={(e) => {\n                            if (e.key === 'Enter' && !isLoading) {\n                                sendMessage();\n                            }\n                        }}\n                        placeholder=\"Type your technical issue or question...\"\n                        className=\"flex-1 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-700\"\n                        disabled={isLoading}\n                    />\n                    <button\n                        onClick={sendMessage}\n                        className={`ml-4 px-6 py-3 rounded-lg font-semibold shadow-md transition duration-300 ease-in-out transform ${\n                            isLoading\n                                ? 'bg-gray-400 cursor-not-allowed'\n                                : 'bg-blue-600 hover:bg-blue-700 text-white hover:scale-105'\n                        }`}\n                        disabled={isLoading}\n                    >\n                        Send\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}